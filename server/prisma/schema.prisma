generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = env("DATABASE_PROVIDER")
  url      = env("DATABASE_URL")
}

enum EmployeeStatus {
  active
  inactive
}

enum EventStatus {
  draft
  scheduled
  completed
  canceled
}

enum SavedItemKind {
  scheduler_draft
  note
  template
}

model Employee {
  id        String      @id @default(uuid())
  firstName String
  lastName  String
  email     String      @unique
  phone     String?
  role      String?
  status    EmployeeStatus @default(active)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  assignments Assignment[]
}

model Event {
  id          String      @id @default(uuid())
  title       String
  date        DateTime
  startTime   DateTime?
  endTime     DateTime?
  location    String?
  clientName  String?
  clientPhone String?
  notes       String?
  status      EventStatus @default(draft)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  assignments Assignment[]
  savedItems  SavedItem[]
}

model Assignment {
  id          String   @id @default(uuid())
  event       Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId     String
  employee    Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  employeeId  String
  role        String?
  assignedAt  DateTime @default(now())

  @@unique([eventId, employeeId])
  @@index([eventId])
}

model SavedItem {
  id          String        @id @default(uuid())
  formKey     String
  kind        SavedItemKind
  payload     Json
  formVersion String?
  createdBy   String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  event       Event?        @relation(fields: [eventId], references: [id], onDelete: SetNull)
  eventId     String?

  @@index([eventId])
  @@unique([formKey, kind])
}
